generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  nickname            String              @unique @default(cuid())
  scheduleSubscribing ScheduleSubscribe[] @relation("ScheduleSubscribers") // 내가 구독하는 캘린더들
  scheduleSubscribers ScheduleSubscribe[] @relation("ScheduleSubscribing") // 내 캘린더를 구독하는 사람들
  schedules           Schedule[]
}

model ScheduleSubscribe {
  subscribingId       String
  subscriberId        String
  scheduleSubscriber  User   @relation("ScheduleSubscribers", fields: [subscriberId], references: [id])
  scheduleSubscribing User   @relation("ScheduleSubscribing", fields: [subscribingId], references: [id])

  @@id([subscribingId, subscriberId])
}

model Schedule {
  id        String   @id @default(cuid())
  date      DateTime @db.Date
  startTime Int // 0 ~ 23
  endTime   Int // 1 ~ 24
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Content {
  id                             String                          @id @default(cuid())
  name                           String
  hashTag                        String
  type                           ContentType
  longitude                      Float // 경도
  latitude                       Float // 위도
  recommandHashTags              Json // String[]
  naverMapLink                   String
  kakaoMapLink                   String
  appleMapLink                   String
  catchTableLink                 String?
  mwohajiHashTagedInstagramPosts MwohajiHashTagedInstagramPost[]
  meta                           Json?
}

model MwohajiHashTagedInstagramPost {
  id           String  @id @default(cuid())
  thumbnailUrl String  @db.Text
  iosLink      String
  aosLink      String
  meta         Json
  content      Content @relation(fields: [contentId], references: [id])

  contentId String
}

enum ContentType {
  realtimeHotPlace
  waitingRestaurant
}

enum Gender {
  male
  female
}
